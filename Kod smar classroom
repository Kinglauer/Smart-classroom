#include <Wire.h>
#include <BH1750.h>
#include <Adafruit_CCS811.h>
#include <DHT.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_NeoPixel.h>

#define BLYNK_TEMPLATE_ID      "TMPL4EAiYMHIv"
#define BLYNK_TEMPLATE_NAME    "SmartClassroom"
#define BLYNK_AUTH_TOKEN       "x8vjnPsDCfbX0pN542TtXNjzPBbmiL9k"

// WiFi
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>

#define WIFI_SSID "Betka"
#define WIFI_PASSWORD "heslo123"

// Virtuálne piny
#define VIRTUAL_PIN_TEMPERATURE V0
#define VIRTUAL_PIN_HUMIDITY    V1
#define VIRTUAL_PIN_LUX         V2
#define VIRTUAL_PIN_CO2         V3
#define VIRTUAL_PIN_TVOC        V4

// --- DHT11 ---
#define DHTPIN 4        
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// --- BH1750 a CCS811 ---
BH1750 lightMeter;
Adafruit_CCS811 ccs;

// --- RGB LED ---
#define LED_R 25
#define LED_G 26
#define LED_B 27

// --- LED Matica ---
#define LED_MATRIX_PIN 13  
#define LED_COUNT 64
Adafruit_NeoPixel strip(LED_COUNT, LED_MATRIX_PIN, NEO_GRB + NEO_KHZ800);

// --- LED pre rekuperáciu ---
#define LED_REKUP 33

// --- Cieľové hodnoty ---
#define TARGET_LUX   700
#define TARGET_CO2   2000   // ppm
#define TARGET_TVOC  600    // ppb

void setup() {
  Serial.begin(115200);
  delay(100);

  Wire.begin(21, 22);  // I2C pre ESP32

  // WiFi pripojenie
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi pripojené!");
  Serial.print("IP Adresa: ");
  Serial.println(WiFi.localIP());

  Blynk.begin(BLYNK_AUTH_TOKEN, WIFI_SSID, WIFI_PASSWORD);

  dht.begin();

  Serial.println("Inicializujem BH1750...");
  if (lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE, 0x23)) {
    Serial.println("BH1750 OK");
  } else {
    Serial.println("CHYBA: BH1750 sa nepodarilo inicializovať!");
  }

  Serial.println("Inicializujem CCS811...");
  if (!ccs.begin()) {
    Serial.println("CHYBA: CCS811 sa nepodarilo nájsť!");
    while (1);
  }

  while (!ccs.available()) {
    delay(100);
  }
  Serial.println("CCS811 OK");

  pinMode(LED_R, OUTPUT);
  pinMode(LED_G, OUTPUT);
  pinMode(LED_B, OUTPUT);

  strip.begin();
  strip.show();

  pinMode(LED_REKUP, OUTPUT);
}

void loop() {
  Blynk.run();

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (!isnan(temp) && !isnan(hum)) {
    Serial.print("Teplota: ");
    Serial.print(temp);
    Serial.println(" °C");

    Serial.print("Vlhkosť: ");
    Serial.print(hum);
    Serial.println(" %");
  } else {
    Serial.println("CHYBA: Nepodarilo sa prečítať z DHT11");
  }

  float lux = lightMeter.readLightLevel();
  if (lux >= 0) {
    Serial.print("Svetlo: ");
    Serial.print(lux);
    Serial.println(" lx");

    int brightness = 0;
    if (lux < TARGET_LUX) {
      brightness = map(lux, 0, TARGET_LUX, 255, 0);
    } else {
      brightness = map(lux, TARGET_LUX, 1000, 0, 255);
    }

    strip.fill(strip.Color(brightness, brightness, brightness));  
    strip.show();
  } else {
    Serial.println("CHYBA: Nepodarilo sa prečítať BH1750");
  }

  int co2 = -1;
  int tvoc = -1;

  if (ccs.available()) {
    if (!ccs.readData()) {
      co2 = ccs.geteCO2();
      tvoc = ccs.getTVOC();

      Serial.print("eCO2: ");
      Serial.print(co2);
      Serial.print(" ppm, TVOC: ");
      Serial.print(tvoc);
      Serial.println(" ppb");

      // Rekuperácia na základe cieľových hodnôt
      if (co2 > TARGET_CO2 || tvoc > TARGET_TVOC) {
        Serial.println("Zapínam rekuperáciu (LED)");
        digitalWrite(LED_REKUP, HIGH);
      } else {
        digitalWrite(LED_REKUP, LOW);
      }

    } else {
      Serial.println("CHYBA: Nepodarilo sa prečítať CCS811");
    }
  }

  // Farebná signalizácia kvality vzduchu
  if (co2 > TARGET_CO2 || tvoc > TARGET_TVOC) {
    Serial.println("Kvalita vzduchu zlá, LED na červeno");
    digitalWrite(LED_R, LOW);  
    digitalWrite(LED_G, HIGH);
    digitalWrite(LED_B, HIGH);
  } else if (temp < 18 || temp > 26 || hum < 30 || hum > 60) {
    Serial.println("Teplota alebo vlhkosť zlá, LED na žlto");
    digitalWrite(LED_R, LOW);  
    digitalWrite(LED_G, LOW); 
    digitalWrite(LED_B, HIGH);
  } else {
    Serial.println("Všetko v poriadku, LED na zeleno");
    digitalWrite(LED_R, HIGH);    
    digitalWrite(LED_G, LOW); 
    digitalWrite(LED_B, HIGH);
  }

  // Odoslanie do Blynk
  Blynk.virtualWrite(VIRTUAL_PIN_TEMPERATURE, temp);
  Blynk.virtualWrite(VIRTUAL_PIN_HUMIDITY, hum);
  Blynk.virtualWrite(VIRTUAL_PIN_LUX, lux);
  Blynk.virtualWrite(VIRTUAL_PIN_CO2, co2);
  Blynk.virtualWrite(VIRTUAL_PIN_TVOC, tvoc);

  Serial.println("-----------------------------");
  delay(2000);
}
